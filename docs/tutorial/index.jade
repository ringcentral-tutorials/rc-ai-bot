.chapter(data-title='RingCentral AI Bot')
  .step(data-title='Overview', data-file='../README.md', data-highlight='1-6')
    :markdown
      ## Overview
      1. Prepare the development env
      1. Test the bot
      1. The bot workflow
        1. Bot auth
        1. Subscribing for bot Events
        1. Bot webhook get subscribed info
        1. Bot post message
        1. Build the user authorize URL
        1. User authrize
        1. Subscribing for user voicemail events
        1. User webhook
        1. Process the voicemail
      1. Practice
        1. Support unmonitor command
        2. Write a custom command support
        3. Just tell chat group how many new voicemail there
        4. Write custom voicemail response
  .step(data-title='Prerequisites', data-file='../README.md', data-highlight='8-35')
    :markdown
      ## Prepare the development env

      Follow the readme's instruction, create required App, set proper env, get the development env ready, add the bot to glip, ready to test the bot.

      - 1.Node.js >= 8.10
      - 2.Create a bot app in [RingCentral developer site](https://developers.ringcentral.com), with permissions: `ReadContacts ReadMessages ReadPresence Contacts ReadAccounts SMS InternalMessages ReadCallLog ReadCallRecording SubscriptionWebhook Glip`
      - 3.Create a browser based app in RingCentral developer site, with all permissions.

      - 4.Prepare the development env

      ```
      git clone git@github.com:ringcentral-tutorials/ringcentral-ai-bot.git
      # or git clone https://github.com/ringcentral-tutorials/ringcentral-ai-bot.git
      cd ringcentral-ai-bot
      yarn

      # create config
      cp .sample.env .env
      # then edit .env, specify credentials and other environment variables

      ## start local server
      yarn dev

      ## start a ngrok proxy to local port
      yarn proxy
      # https://xxxxxx.ngrok.io ---> http://localhost:7867
      # you can check ngrok status from http://localhost:4040
      ```
      - 5.After started the ngrok server, you can set your ringcentral app's redirect URL to lamda's api gateway url, `https://xxxxxx.ngrok.io/bot-oauth` for bot app, `https://xxxxxx.ngrok.io/user-oauth` for user app, ngrok will proxy the request to your local server.
      - Goto your ringcentral developer site, in bot app's bot page, click `Add to glip`, do remember the bot name you specified, we will need it in next section.


  .step(data-title='Test the bot', data-file='../README.md', data-highlight='37-38')
    :markdown
      ## Test the bot

      Login to https://glip-app.devtest.ringcentral.com, click bot's name from people list to start the chat, just follow the bot's instructions. It works, then we can see how it works.

  .step(data-title='Bot auth', data-file='../src/lamda/lib/bot-oauth.js', data-highlight='10-13')
    :markdown
      ## Bot Authentication

      Since we set the redirect URL in bot app's setting page, when click the `Add to glip` Button, ringcentral will send request to the redirect URL, proxied by ngrok, finallly get to our local server.

      We will use the code(`event.queryStringParameters.code`) provided by the request to do authorize, and store the fetched accessToken/user id etc to database.

      Then we can subscribe to glip post and group event, so when user add bot to chat group, or post message in chat group, ringcentral will send notification to subscribed webhook.

  .step(data-title='Subscribe to bot Events', data-file='../src/lamda/lib/store.js', data-highlight='94-118')
    :markdown
      ## Subscribing for bot Events

      The bot accesstoken will never expires, we set subscibe expire to a very long time(500000000ms, 15year+), set webhook to `/bot-webhook` so we can get data when use add bot to chat group, or post message in chat group.

      Event filters are like this:

      ```js
      const botEventFilters = () => [
        '/restapi/v1.0/glip/posts',
        '/restapi/v1.0/glip/groups'
      ]
      ```

  .step(data-title='Bot webhook get subscribed info', data-file='../src/lamda/lib/bot-webhook.js', data-highlight='31-51')
    :markdown
      ## Bot webhook get subscribed info

      With the subscription, when user add bot to chat group, or post message in chat group, now our `/bot-webhook` will get the subscribed info, so we can respond accordingly, like post some message to guide user.

  .step(data-title='Bot post message', data-file='../src/lamda/lib/store.js', data-highlight='144-149')
    :markdown
      ## Bot post message

      To create a post use the Glip Create Post API:

      `/restapi/v1.0/glip/groups/{groupId}/posts`

      This requires sending the bot access token in the `Authorization` header as the `Bearer` token value.

      The bot automatically handles both creating a new post and authorization.

      More information on the API is available here:

      * [Create Post API](https://developer.ringcentral.com/api-reference#Posts-createGlipGroupPost)

  .step(data-title='Build the user authorize URL', data-file='../src/lamda/lib/store.js', data-highlight='192-197')
    :markdown
      ## Build the user authorize URL

      Why do we need user's authorization? Because we want to access user's VoiceMails. 

      After bot got joined chat group message, and guide user to `@` the bot, and command the bot by `@{BOTID} monitor`, bot sends the user authorize URL, let user to do the OAuth authorization first, that is why we need the user app in the beginning, bot could not get user info without authorization from user, it is by design.

  .step(data-title='User authrize', data-file='../src/lamda/lib/user-oauth.js', data-highlight='9-21')
    :markdown
      ## User authorize

      When user click the authorize URL, and successfully authorized, OAuth flow will visit our server's `/user-oauth` with authrization code.

      Similar to bot auth process, just use the auth code get access token, store user info, group info and token to database. The difference is user access token expire. We will see how to deal with this later.

      With user's authorization, we can subscribe to user's voicemail message, so whenever new voicemail comes, ringcentral server notifies the bot server.

  .step(data-title='Subscribe to user voicemail events', data-file='../src/lamda/lib/store.js', data-highlight='248-261')
    :markdown
      ## Subscribe to user voicemail events

      For user we subscribe these:
      ```
      [
        '/restapi/v1.0/account/~/extension/~/message-store',
        '/restapi/v1.0/subscription/~?threshold=59&interval=15'
      ]
      ```
      1.Subscribe to `message-store` to get new voicemail notification.

      2.Subscribe to `/restapi/v1.0/subscription/~?threshold=59&interval=15` will setup a reminder, 59 seconds before subscribe expires, send notication request to supplied webhook url(`/user-webhook` in our case), if not susccessful, resend every 15 senconds, so we do token renew and subsribe renew when we got these notification request to make user token auto renew.

      You can read more about reminder hook from https://github.com/ringcentral/ringcentral-api-docs/blob/master/docs/notifications_webhooks.md

  .step(data-title='User webhook', data-file='../src/lamda/lib/user-webhook.js', data-highlight='10-47')
    :markdown
      ## User webhook

      Since we subscribe user voicemail events and reminder event, we must handle then accordingly.

      That is where we could do different bot operations. We can practice later.

 .step(data-title='Process the voicemail', data-file='../src/lamda/lib/voicemail-process.js', data-highlight='37-62')
    :markdown
      ## Process the voicemail

      When you receive the new voicemail event, process the voicemail by transcribing it to text and then analyzing the text.

      Since it is a external service, we put it in a seprate module: https://github.com/zxdong262/audio-analysis-service

      You may noticed by default we get a fake result for demo, if you want to use real google service to handle it, you should follow the instruction in [README#Build and Run in production env](https://github.com/ringcentral-tutorials/ringcentral-ai-bot#build-and-run-in-production-env) to set your `GOOGLE_APPLICATION_CREDENTIALS` in `.env` then you will get real result.

      That is the whole process. Hope you know how it works now. If so, let's do some practice, write some code.
 .step(data-title='Support unmonitor command', data-file='../src/lamda/lib/bot-webhook.js', data-highlight='63-75')
    :markdown
      ## Support unmonitor command

      When you post `@botID unmonitor`, bot did not response, let's uncomment the code and restart the server to make it work.
 .step(data-title='Write a custom command support', data-file='../src/lamda/lib/bot-webhook.js', data-highlight='92-93')
    :markdown
      ## Add a custom command

      Now you can see how the bot command works, try write one yourself.

 .step(data-title='Just tell chat group how many new voicemail there', data-file='../src/lamda/lib/user-webhook.js', data-highlight='24-40')
    :markdown
      ## Only show number of new voicemails

      Let's replace the default voicemail process with simply telling user how many new voicemail there are by commenting out line 26-28, uncommenting line 31-40

 .step(data-title='Write custom voicemail response', data-file='../src/lamda/lib/user-webhook.js', data-highlight='24-40')
    :markdown
      ## Write custom voicemail response

      The last practice!

      Replace line26-28, write you own process function, send some custom response about new voice mail.

      That' i's all, have fun with the bot coding~
